# Web fundamentals
### How do we load websites
**Finding the server**
Initially, a DNS request is made. DNS is like a giant phone book that takes a URL (and turns it into an IP address. This means that people don’t have to remember IP addresses for their websites.
The IP address uniquely identifies each internet connected device, like a web server or your computer. These are formed of 4 groups of numbers, each 0-255 (x.x.x.x) and called an octet. An example shown below is 100.70.172.11.
**Loading some content**
Once the browser knows the server's IP address, it can ask the server for the web page. This is done with a HTTP GET request. GET is an example of a HTTP verb(or method), which are the different types of request (More on these later). The server will respond to the GET request with the web page content. If the web page is loading extra resources, like JavaScript, images, or CSS files, those will be retrieved in separate GET requests.

For most websites now, these requests will use HTTPS. HTTPS is a secure (encrypted) version of HTTP, it works in more or less the same way. This uses TLS 1.3 (normally) encryption in order to communicate without:
-   Other parties being able to read the data
-   Other parties being able to modify the data

A web server is software that receives and responds to HTTP(S) requests. Popular examples are Apache, Nginx and Microsoft's IIS. By default, HTTP runs on port 80 and HTTPS runs on port 443.
**Responses**
﻿The server should reply with a response. The response follows a similar structure to the request, but the first line describes the status rather than a verb and a path.  
The status will normally be a code, you're probably already familiar with 404: Not found.
A basic breakdown of the status codes is:
-   100-199: Information
-   200-299: Successes (200 OK is the "normal" response for a GET)
-   300-399: Redirects (the information you want is elsewhere)
-   400-499: Client errors (You did something wrong, like asking for something that doesn't exist)
-   500-599: Server errors (The server tried, but something went wrong on their side)
### Cookies
Cookies are small bits of data that are stored in your browser. **Each browser will store them separately, so cookies in Chrome won't be available in Firefox.** They have a huge number of uses, but the most common are either session management or advertising (tracking cookies). Cookies are normally sent with every HTTP request made to a server.
Because HTTP is stateless (Each request is independent and no state is tracked internally), cookies are used to keep track of this. They allow sites to keep track of data like what items you have in your shopping cart, who you are, what you've done on the website and more.

Cookies can be broken down into several parts. Cookies have a name, a value, an expiry date and a path. The name identifies the cookie, the value is where data is stored, the expiry date is when the browser will get rid of the cookie automatically and the path determines what requests the cookie will be sent with. Cookies are normally only sent with requests to the site that set them (Weird things happen with advertising/tracking).

The server is normally what sets cookies, and these come in the response headers ("Set-Cookie"). Alternatively, these can be set from JavaScript inside your browser.
